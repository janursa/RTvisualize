
# How to use
This program creates and updates the plots based on the data given in the CSV files. In the case of using the [build-in plots](#using-build-in-plots), the content of these files must be formatted in the required form explained [here]. However, if user intends to pass a [custom plot](#using-custom-plots), there is no formating required. 
The program requires a settings argument as a Python dictionary object that can consists the information of graphs, as many as desired. The structure of this settings object is: 
```json
settings = {
  "graph_name1":graph_1_settings,
  "graph_name2":graph_2_settings,
}
```
The names preceding individual graph settings are the plot titles which can be chosen arbitrary. Graph specific settings are somewhat different between different choices of plotting which can be found on [build-in settings](#settings-options-for-build-in-plots) and [custom settings](#settings-options-for-custom-plots) .  
Once the settings object is created, simply call the `watch` class and `run` the program as:
```
from monitor import watch
watch(settings).run()
```
It executes the `Dash` app and returns an IP such as:
```
Running on http://127.0.0.1:8050/
```
Copy and past ``http://127.0.0.1:8050/`` to the browser and the desired graphs will appear. You may need to refresh the page or hit the `update` button to see the results. 
#### Using build-in plots
So far, there are only two types of plots that are supported in build-in approach, i.e. [lines and scatter](https://plotly.com/python/line-and-scatter/). They are generic and provide limited flexibility. In the case that user interested to have more options,  [custom plot](#using-custom-plots) are recommended. 
##### Formating CSV files
##### -Lines plot
The lines plot intends to monitor the progress of a variable over time. Therefore, the x-axis is assumed to be time steps and are generated by the program automatically. The data of the Y-axis, however, needs to be given in the file as columns. Separate lines are generated for each column with the label that appears as the column name and plotted together. 

![Lines_graph](lines.svg)

In case you are interested to plot them seperately, provide them in different files.
##### -Scatter plot
The information of each point of a scatter plot should be given as a row in CSV files. The informatin includes `x` and `y` which are the coordinates of the corrosponding point, and `size` and `type` which determine size of categories of each point, respectively. `type` is be also used to label each point. The latter two options are optionally and can be omitted. The file should look like:

![scatter_graph](scatter.svg)

##### Settings options for build-in plots

#### Using custom plots
##### Settings options for custom plots


* **Using build-in plots:** In this approach, the user needs to provide these settings:

```json
            {
              "graph_dir" = "path/to/CSV/file.csv",
              "graph_type" = scatter or lines
              "graph_size" = graph width in px, e.g. 700
              "x-axis-move" = True or false. If true, the x-axis moves as it receives more data
              "x-axis-span" = a number. The length of x axis (if "x-axis-move" is true)
            }
```
            
Currently, there are two ways of using this code:

* So far, there are only two types of plots that are available, i.e. [lines and scatter](https://plotly.com/python/line-and-scatter/).
  * **Lines**: The program assumes that the X-axis shows steps/time intervals, and the data of the Y-axis is given in in the file as
```json
{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25
}
```
pip install module or python setup.py install

pip install module or python setup.py install
